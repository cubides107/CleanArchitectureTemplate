// <auto-generated />
using System;
using CleanArchitecture.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Database.Migrations;
[DbContext(typeof(ApplicationDbContext))]
partial class ApplicationDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "9.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("PermissionRole", b =>
            {
                b.Property<string>("PermissionCode")
                    .HasColumnType("character varying(100)")
                    .HasColumnName("permission_code");

                b.Property<string>("RoleName")
                    .HasColumnType("character varying(50)")
                    .HasColumnName("role_name");

                b.HasKey("PermissionCode", "RoleName")
                    .HasName("pk_role_permissions");

                b.HasIndex("RoleName")
                    .HasDatabaseName("ix_role_permissions_role_name");

                b.ToTable("role_permissions", (string)null);

                b.HasData(
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Member"
                    },
                    new
                    {
                        PermissionCode = "users:read",
                        RoleName = "Administrator"
                    },
                    new
                    {
                        PermissionCode = "users:create",
                        RoleName = "Administrator"
                    });
            });

        modelBuilder.Entity("RoleUser", b =>
            {
                b.Property<string>("RolesName")
                    .HasColumnType("character varying(50)")
                    .HasColumnName("role_name");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid")
                    .HasColumnName("user_id");

                b.HasKey("RolesName", "UserId")
                    .HasName("pk_user_roles");

                b.HasIndex("UserId")
                    .HasDatabaseName("ix_user_roles_user_id");

                b.ToTable("user_roles", (string)null);

                b.HasData(
                    new
                    {
                        RolesName = "Administrator",
                        UserId = new Guid("b3e8087e-975d-4a35-b9ad-6b8d7c41a550")
                    });
            });

        modelBuilder.Entity("CleanArchitecture.Domain.Users.Entities.Permission", b =>
            {
                b.Property<string>("Code")
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)")
                    .HasColumnName("code");

                b.HasKey("Code")
                    .HasName("pk_permissions");

                b.ToTable("permissions", (string)null);

                b.HasData(
                    new
                    {
                        Code = "users:read"
                    },
                    new
                    {
                        Code = "users:create"
                    });
            });

        modelBuilder.Entity("CleanArchitecture.Domain.Users.Entities.Role", b =>
            {
                b.Property<string>("Name")
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)")
                    .HasColumnName("name");

                b.HasKey("Name")
                    .HasName("pk_roles");

                b.ToTable("roles", (string)null);

                b.HasData(
                    new
                    {
                        Name = "Member"
                    },
                    new
                    {
                        Name = "Administrator"
                    });
            });

        modelBuilder.Entity("CleanArchitecture.Domain.Users.Entities.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("email");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("first_name");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("last_name");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("password_hash");

                b.HasKey("Id")
                    .HasName("pk_users");

                b.HasIndex("Email")
                    .IsUnique()
                    .HasDatabaseName("ix_users_email");

                b.ToTable("users", (string)null);

                b.HasData(
                    new
                    {
                        Id = new Guid("b3e8087e-975d-4a35-b9ad-6b8d7c41a550"),
                        Email = "admin@gmail.com",
                        FirstName = "admin",
                        LastName = "admin",
                        PasswordHash = "DF637DD4C6ACB86DEBC9401145F9B0C7C112CD94B4E454EAD510B0CE035CB044-DBC218C4173C96DE41CCCD8A77A1CC5B"
                    });
            });

        modelBuilder.Entity("PermissionRole", b =>
            {
                b.HasOne("CleanArchitecture.Domain.Users.Entities.Permission", null)
                    .WithMany()
                    .HasForeignKey("PermissionCode")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_role_permissions_permissions_permission_code");

                b.HasOne("CleanArchitecture.Domain.Users.Entities.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleName")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_role_permissions_roles_role_name");
            });

        modelBuilder.Entity("RoleUser", b =>
            {
                b.HasOne("CleanArchitecture.Domain.Users.Entities.Role", null)
                    .WithMany()
                    .HasForeignKey("RolesName")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_user_roles_roles_roles_name");

                b.HasOne("CleanArchitecture.Domain.Users.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired()
                    .HasConstraintName("fk_user_roles_users_user_id");
            });
#pragma warning restore 612, 618
    }
}
